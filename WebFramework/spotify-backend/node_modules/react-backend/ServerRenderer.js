'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utilities = require('./utilities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Internal class to pass the serverRenderer instance 
 * to the WithData child
 * @type InjectServerRenderer
 */
var InjectServerRenderer = function (_Component) {
  _inherits(InjectServerRenderer, _Component);

  /**
   * Constructor
   * @param {type} props - must contain a serverRenderer property
   * @returns {InjectServerRenderer}
   */
  function InjectServerRenderer(props) {
    _classCallCheck(this, InjectServerRenderer);

    var _this = _possibleConstructorReturn(this, (InjectServerRenderer.__proto__ || Object.getPrototypeOf(InjectServerRenderer)).call(this, props));

    var serverRenderer = _this.props.serverRenderer;

    _this.serverRenderer = serverRenderer;
    return _this;
  }

  _createClass(InjectServerRenderer, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var serverRenderer = this.serverRenderer;
      return { serverRenderer: serverRenderer };
    }
  }, {
    key: 'render',
    value: function render() {
      return (0, _utilities.renderChildren)(this.props);
    }
  }]);

  return InjectServerRenderer;
}(_react.Component);

InjectServerRenderer.childContextTypes = {
  serverRenderer: _propTypes2.default.object
};

/**
 * Provides a two step rendering algorythm. First step collects the data needs, 
 * and second step resolves the data and renders the DOM components.
 * @type ServerRenderer
 */

var ServerRenderer = function () {
  function ServerRenderer(dataProvider, components) {
    _classCallCheck(this, ServerRenderer);

    this.renderingDataOnly = null;

    this.dataProvider = dataProvider;
    this.componentTree = _react2.default.createElement(
      InjectServerRenderer,
      { serverRenderer: this },
      components
    );
  }

  /**
   * During the first step, this will be true.
   * Then it will be false, and DOM components will be rendered
   */


  _createClass(ServerRenderer, [{
    key: 'render',


    /**
     * This function will :
     * - collect all the data needs
     * - resolve the data needs
     * - render the presentation
     * @returns {Promise} - a promise resolving to the rendered DOM tree as string
     */
    value: function render() {
      this.renderingDataOnly = true;

      // The first rendering will get only the data needs
      _server2.default.renderToString(this.componentTree);

      this.renderingDataOnly = false;

      // we resolve the needs and return a promise with the complete rendered tree
      var self = this;
      return this.dataProvider.resolveNeeds().then(function () {
        return _server2.default.renderToString(self.componentTree);
      });
    }
  }]);

  return ServerRenderer;
}();

exports.default = ServerRenderer;