'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRouterDom = require('react-router-dom');

var _utilities = require('./utilities');

var _ProviderRules2 = require('./ProviderRules');

var _ProviderRules3 = _interopRequireDefault(_ProviderRules2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// These are the three interal states of the ProviderData component
var DONE = 0;
var LOADING = 1;
var LOADED = 2;

/**
 * Use this WithData component to wrap all your React components
 * that need access to data from the dataProvider
 */

var WithData = function (_ProviderRules) {
  _inherits(WithData, _ProviderRules);

  /**
   * Constructor
   * @param {Object} props - must contain the dataProvider instance property
   * @param {Object} context - will receive an optional context when rendering 
   * at server side
   * @returns {ProviderData}
   */
  function WithData(props, context) {
    _classCallCheck(this, WithData);

    var _this = _possibleConstructorReturn(this, (WithData.__proto__ || Object.getPrototypeOf(WithData)).call(this, props));

    _this.loadState = DONE;

    if (context && context.serverRenderer) {
      _this.serverRenderer = context.serverRenderer;
    }
    return _this;
  }

  /**
   * This component will wait until all the data from the backend are ready (or in error)
   * and then will update the component tree.
   * @returns {Boolean}
   */


  _createClass(WithData, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      if (this.loadState === LOADING) return false;
      if (this.loadState === LOADED) {
        this.loadState = DONE;
        return true;
      }

      var shouldReload = this.dataProvider.shouldReload();

      if (shouldReload) {
        this.loadState = LOADING;
        var self = this;
        this.dataProvider.resolveNeeds().then(function () {
          self.loadState = LOADED;
          self.forceUpdate();
        });
        return false;
      } else return true;
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.serverRenderer && this.serverRenderer.renderingDataOnly) return null;else return (0, _utilities.renderChildren)(this.props);
    }
  }]);

  return WithData;
}(_ProviderRules3.default);

WithData.contextTypes = {
  serverRenderer: _propTypes2.default.object // optional
};

exports.default = WithData;