'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utilities = require('./utilities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Use this React component in your component tree to express data needs.
 */
var NeedsData = function (_Component) {
  _inherits(NeedsData, _Component);

  function NeedsData(props, context) {
    _classCallCheck(this, NeedsData);

    var _this = _possibleConstructorReturn(this, (NeedsData.__proto__ || Object.getPrototypeOf(NeedsData)).call(this, props, context));

    _this.render = function () {
      return (0, _utilities.renderChildren)(_this.props);
    };

    var needs = props.needs;
    var dataProvider = context.dataProvider;

    dataProvider.pushNeeds(needs);
    return _this;
  }

  return NeedsData;
}(_react.Component);

NeedsData.propTypes = {
  needs: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.array]).isRequired
};
NeedsData.contextTypes = {
  dataProvider: _propTypes2.default.object
};

exports.default = NeedsData;