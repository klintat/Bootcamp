'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRouterDom = require('react-router-dom');

var _utilities = require('./utilities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Use the ProviderRules component along with NeedsData components
 * in order to express how to retrieve data from the backend
 */
var ProviderRules = function (_Component) {
  _inherits(ProviderRules, _Component);

  /**
   * Constructor
   * @param {Object} props - must contain a dataProvider property
   * @returns {ProviderRules}
   */
  function ProviderRules(props) {
    _classCallCheck(this, ProviderRules);

    var _this = _possibleConstructorReturn(this, (ProviderRules.__proto__ || Object.getPrototypeOf(ProviderRules)).call(this, props));

    var dataProvider = _this.props.dataProvider;

    _this.dataProvider = dataProvider;
    return _this;
  }

  _createClass(ProviderRules, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var dataProvider = this.dataProvider;
      return { dataProvider: dataProvider };
    }
  }, {
    key: 'render',
    value: function render() {
      return (0, _utilities.renderChildren)(this.props);
    }
  }]);

  return ProviderRules;
}(_react.Component);

ProviderRules.propTypes = {
  dataProvider: _propTypes2.default.object.isRequired
};
ProviderRules.childContextTypes = {
  dataProvider: _propTypes2.default.object
};

exports.default = ProviderRules;